/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-2022 DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

buildscript {
    repositories {
        maven {
            name = "Minecraft Forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "SpongePowered"
            url = "https://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:$forgeGradleVersion"
        classpath "org.spongepowered:mixingradle:$mixingradleVersion"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "$shadowPluginVersion"
}

if (ideaSyncActive.toBoolean()) {
    idea.module.inheritOutputDirs = false
}

apply from: "${project.rootDir}/mc/forge.gradle"
apply from: "${project.rootDir}/natives/natives.gradle"

minecraft {
    mappings mappingsChannel, mappingsVersion

    runs {
        client {
            workingDirectory "${projectDir.absolutePath}/run"
            ideaModule "${project.rootProject.name}${project.path.replace(':', '.')}.main"

            //property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"

            property "fp2.debug", "true"
            property "fp2.gl.opengl.debug", "true"

            args "-mixin.config=mixins.fp2.at.json"
            args "-mixin.config=mixins.fp2.core.json"
            args "-mixin.config=mixins.fp2.fixes.json"
            args "-mixin.config=mixins.fp2.debug.json"

            mods {
                fp2 {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    //:gl module, plus dependency-specific addon modules
    implementationShade project(":gl")
    runtimeOnlyShade project(":gl:opengl-lwjgl3")

    //:core module, plus dependency-specific addon modules
    implementationShade project(":core")
    implementationShade project(":core:log4j")
    implementationShade project(":core:minecraft")
    implementationShade project(":core:mixin")
    implementationShade project(":core:netty")

    implementationShade project(":resources")

    //implementationProvided "net.daporkchop:forgerocks:$rocksdbVersion-$minecraftVersion"
}

fp2.translateResources {
    targetVersion = "minecraft_pack_format_v6"
    sourceSet = sourceSets.main
}

mixin {
    add sourceSets.main, "mixins.fp2.refmap.json"
}

//completely disable normal jar
jar.enabled = false
tasks.whenTaskAdded { task -> //disable reobfJar task (it's not added until later, so we can't disable it the normal way)
    if ("reobfJar".equals(task.name)) {
        task.enabled = false
    }
}

//create shaded jar and reobfuscate it
shadowJar {
    //suffix jar name with branch name, if present and not the master branch
    String branchName = System.getenv("BRANCH_NAME")
    branchName = branchName != null && !branchName.isEmpty() && !"master".equals(branchName) ? '-' + branchName.replaceAll("[^a-zA-Z0-9.-]", "_") : "";
    archiveName "fp2-$fp2Version-$minecraftVersion" + branchName + ".jar"

    configurations = [project.configurations.shade_]

    exclude 'module-info.class'

    manifest {
        attributes(
                "MixinConfigs": "mixins.fp2.at.json,mixins.fp2.core.json,mixins.fp2.fixes.json,mixins.fp2.debug.json",
                "tweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "FMLCorePluginContainsFMLMod": "true",
                //"FMLCorePlugin": "net.daporkchop.fp2.impl.mc.forge1_12_2.asm.FP2MixinLoader",
                "ForceLoadAsMod": "true",
                "FMLAT": "fp2_at.cfg"
        )
    }
}

reobf {
    shadowJar {}
}

shadowJar.finalizedBy reobfShadowJar
build.dependsOn shadowJar

//mixin hot-swapping seems to be entirely non-functional on ModLauncher
/*task preIntellijRuns {
    doFirst {
        java.util.stream.StreamSupport.stream(configurations.compileClasspath.spliterator(), false).filter({
            java.nio.file.Paths.get(it.absolutePath).getFileName().toString().matches("mixin-\\d+(\\.\\d+)*(-.*)?(?<!-processor)\\.jar")
        }).findAny().ifPresent({ file ->
            minecraft.runs.all { run ->
                run.jvmArgs += "-javaagent:" + file.absolutePath
            }
        })
    }
}
tasks.whenTaskAdded { task ->
    if ("genIntellijRuns".equals(task.name)) {
        task.dependsOn(preIntellijRuns)
    }
}*/
