/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-2022 DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

configurations.all {
    resolutionStrategy {
        force "org.apache.logging.log4j:log4j-api:$log4jVersion"
        force "org.apache.logging.log4j:log4j-core:$log4jVersion"
    }
}

apply from: "${project.rootDir}/mc/forge.gradle"
apply from: "${project.rootDir}/natives/natives.gradle"

//prevent ForgeGradle from screwing up the classpath, its "fix" causes the native library output directories to be removed from the classpath and doesn't actually seem to
//  fix anything.
legacy {
    fixClasspath = false
}

minecraft {
    mappings mappingsChannel, mappingsVersion

    runs {
        client {
            workingDirectory "../../run"
            ideaModule "${project.rootProject.name}${project.path.replace(':', '.')}.main"

            property "forge.logging.console.level", "debug"

            property "fp2.debug", "true"
            property "fp2.gl.opengl.debug", "true"

            mods {
                fp2 {
                    source sourceSets.main
                }
            }
        }
    }
}

/*minecraft {
    version = "$minecraftVersion-$minecraftforgeVersion"
    runDir = "../../run"
    mappings = "$mcpmappingsVersion"
    makeObfSourceJar = false

    coreMod = "net.daporkchop.fp2.impl.mc.forge1_12_2.asm.FP2MixinLoader1_12"

    def args = [
            "-Dmixin.checks.interfaces=true",
            "-Dmixin.debug.export=true",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.hotSwap=true",
            "-Dfp2.debug=true",
            "-Xmx2G",
            "-XX:+UseG1GC",
            "-ea",
            "-da:io.netty..."
    ]
    clientJvmArgs += args
    serverJvmArgs += args
}*/

repositories {
    maven { //needed for CWG
        name = "elytradev"
        url = "https://repo.elytradev.com"
    }
    maven {
        url = "https://jitpack.io"
    }
}

dependencies {
    runtimeOnlyShade project(":gl:opengl-lwjgl2")

    implementationShade project(":core:log4j")
    implementationShade project(":core:minecraft")

    implementationShade("net.daporkchop.lib:compression-zstd:$porklibVersion") {
        exclude group: "io.netty"
    }
    implementationShade("net.daporkchop.lib:concurrent:$porklibVersion") {
        exclude group: "io.netty"
    }
    implementationShade("net.daporkchop.lib:logging:$porklibVersion") {
        exclude group: "io.netty"
    }
    implementationShade("net.daporkchop.lib:math:$porklibVersion") {
        exclude group: "io.netty"
    }
    implementationShade("net.daporkchop.lib:primitive:$porklibVersion") {
        exclude group: "io.netty"
    }

    implementationProvided "net.daporkchop:forgerocks:$rocksdbVersion-$minecraftVersion"

    implementationProvided fg.deobf(fp2.deleteMixin("io.github.opencubicchunks:cubicchunks:1.12.2-0.0-SNAPSHOT"))
    implementationProvided fg.deobf("io.github.opencubicchunks:cubicworldgen:1.12.2-0.0-SNAPSHOT")
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraftVersion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraftVersion
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

mixin {
    add sourceSets.main, "mixins.fp2.refmap.json"
}

natives.modules {
    register("cwg-noise") {
        sourceSet = sourceSets.main
        root = "net/daporkchop/fp2/impl/mc/forge1_12_2/compat/cwg/noise"
        simd = true
    }
    register("vanilla-biomes") {
        sourceSet = sourceSets.main
        root = "net/daporkchop/fp2/impl/mc/forge1_12_2/compat/vanilla/biome/layer/c"
        simd = true
    }
    x86 {
        sourceSet = sourceSets.main
        root = "net/daporkchop/fp2/impl/mc/forge1_12_2/compat/x86"
    }
}

//completely disable normal jar
jar.enabled = false
tasks.whenTaskAdded { task -> //disable reobfJar task (it's not added until later, so we can't disable it the normal way)
    if ("reobfJar".equals(task.name)) {
        task.enabled = false
    }
}

//create shaded jar and reobfuscate it
shadowJar {
    //suffix jar name with branch name, if present and not the master branch
    String branchName = System.getenv("BRANCH_NAME")
    branchName = branchName != null && !branchName.isEmpty() && !"master".equals(branchName) ? '-' + branchName.replaceAll("[^a-zA-Z0-9.-]", "_") : "";
    archiveName "fp2-$fp2Version-$minecraftVersion" + branchName + ".jar"

    configurations = [project.configurations.shade_]

    exclude 'module-info.class'

    manifest {
        attributes(
                "MixinConfigs": "mixins.fp2.at.json,mixins.fp2.core.json,mixins.fp2.fixes.json,mixins.fp2.debug.json",
                "tweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "FMLCorePluginContainsFMLMod": "true",
                "FMLCorePlugin": "net.daporkchop.fp2.impl.mc.forge1_12_2.asm.FP2MixinLoader1_12",
                "ForceLoadAsMod": "true"
        )
    }
}

reobf {
    shadowJar {}
}

shadowJar.finalizedBy reobfShadowJar
build.dependsOn shadowJar

task preIntellijRuns {
    doFirst {
        java.util.stream.StreamSupport.stream(configurations.annotationProcessor.spliterator(), false).filter({
            java.nio.file.Paths.get(it.absolutePath).getFileName().toString().matches("mixin-\\d+(\\.\\d+)*(-.*)?\\.jar")
        }).findAny().ifPresent({ file ->
            minecraft.runs.all { run ->
                run.jvmArgs += "-javaagent:" + file.absolutePath
            }
        })
    }
}
tasks.whenTaskAdded { task ->
    if ("genIntellijRuns".equals(task.name)) {
        task.dependsOn(preIntellijRuns)
    }
}
