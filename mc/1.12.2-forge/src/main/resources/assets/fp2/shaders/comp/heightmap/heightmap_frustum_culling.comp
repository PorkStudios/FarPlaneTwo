/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-$today.year DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#define COMP_HEIGHTMAP_HEIGHTMAP_FRUSTUM_CULLING

#include <"fp2:shaders/comp/command_buffer_selection.comp">
#include <"fp2:shaders/comp/frustum.comp">

//
//
// BUFFERS
//
//

//Positions

//dummy workaround thing to allow access to tightly-packed ivec3s
struct Vec3I {
    int x;
    int z;
    int level;
};

layout(std430, binding = 3) readonly buffer POSITIONS {
    Vec3I positions[];
};

//
//
// CODE
//
//

bool select(uint index) { //implements method in comp/command_buffer_selection.comp
    Vec3I pos = positions[index];

    ivec2 position_absolute = ivec2(pos.x, pos.z) << (T_SHIFT + pos.level);
    ivec2 position_relative = position_absolute - glState.camera.position_floor.xz;

    vec2 origin = vec2(position_relative) - glState.camera.position_fract.xz;
    vec3 min = origin.xxy;
    vec3 max = origin.xxy + vec2((T_VOXELS + 1) << pos.level, 0.0).xyx;

    min.y = -2147483648.0;
    max.y = 2147483647.0;

    //TODO: this always returns true???
    return isBoxInFrustum(min, max);
}
