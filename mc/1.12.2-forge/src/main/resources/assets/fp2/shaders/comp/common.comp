/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-$today.year DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef COMP_COMMON
#define COMP_COMMON

#include <"fp2:shaders/common.glsl">

/*
 * builtins:
 *
 * in uvec3 gl_NumWorkGroups;
 * in uvec3 gl_WorkGroupID;
 * in uvec3 gl_LocalInvocationID;
 * in uvec3 gl_GlobalInvocationID;
 * in uint  gl_LocalInvocationIndex;
 */

/*
 * defines:
 *
 * #define COMPUTE_SHADER_LOCAL_SIZE_X ()
 * #define COMPUTE_SHADER_LOCAL_SIZE_Y ()
 * #define COMPUTE_SHADER_LOCAL_SIZE_Z ()
 * #define COMPUTE_SHADER_LOCAL_SIZE_TOTAL ()
 * #define COMPUTE_SHADER_LOCAL_ENABLE_X ()
 * #define COMPUTE_SHADER_LOCAL_ENABLE_Y ()
 * #define COMPUTE_SHADER_LOCAL_ENABLE_Z ()
 * #define COMPUTE_SHADER_GLOBAL_ENABLE_X ()
 * #define COMPUTE_SHADER_GLOBAL_ENABLE_Y ()
 * #define COMPUTE_SHADER_GLOBAL_ENABLE_Z ()
 */

//
//
// MACRO VALIDATION
//
//

#ifndef COMPUTE_SHADER_LOCAL_SIZE_X
#error COMPUTE_SHADER_LOCAL_SIZE_X must be set!
#endif

#ifndef COMPUTE_SHADER_LOCAL_SIZE_Y
#error COMPUTE_SHADER_LOCAL_SIZE_Y must be set!
#endif

#ifndef COMPUTE_SHADER_LOCAL_SIZE_Z
#error COMPUTE_SHADER_LOCAL_SIZE_Z must be set!
#endif

#ifndef COMPUTE_SHADER_LOCAL_SIZE_TOTAL
#error COMPUTE_SHADER_LOCAL_SIZE_TOTAL must be set!
#endif

#ifndef COMPUTE_SHADER_LOCAL_ENABLE_X
#error COMPUTE_SHADER_LOCAL_ENABLE_X must be set!
#endif

#ifndef COMPUTE_SHADER_LOCAL_ENABLE_Y
#error COMPUTE_SHADER_LOCAL_ENABLE_Y must be set!
#endif

#ifndef COMPUTE_SHADER_LOCAL_ENABLE_Z
#error COMPUTE_SHADER_LOCAL_ENABLE_Z must be set!
#endif

#ifndef COMPUTE_SHADER_GLOBAL_ENABLE_X
#error COMPUTE_SHADER_GLOBAL_ENABLE_X must be set!
#endif

#ifndef COMPUTE_SHADER_GLOBAL_ENABLE_Y
#error COMPUTE_SHADER_GLOBAL_ENABLE_Y must be set!
#endif

#ifndef COMPUTE_SHADER_GLOBAL_ENABLE_Z
#error COMPUTE_SHADER_GLOBAL_ENABLE_Z must be set!
#endif

//
//
// LOCAL WORK GROUP SIZE
//
//

layout(local_size_x = COMPUTE_SHADER_LOCAL_SIZE_X, local_size_y = COMPUTE_SHADER_LOCAL_SIZE_Y, local_size_z = COMPUTE_SHADER_LOCAL_SIZE_Z) in;

//
//
// MACROS
//
//

// gl_WorkGroupInvocationIndex
//   This is a 1D version of gl_WorkGroupID. In other words, it is to gl_WorkGroupID what gl_LocalInvocationIndex is to gl_LocalInvocationID.
#if COMPUTE_SHADER_GLOBAL_ENABLE_X && !COMPUTE_SHADER_GLOBAL_ENABLE_Y && !COMPUTE_SHADER_GLOBAL_ENABLE_Z
#define gl_WorkGroupInvocationIndex (gl_WorkGroupID.x)
#elif !COMPUTE_SHADER_GLOBAL_ENABLE_X && COMPUTE_SHADER_GLOBAL_ENABLE_Y && !COMPUTE_SHADER_GLOBAL_ENABLE_Z
#define gl_WorkGroupInvocationIndex (gl_WorkGroupID.y)
#elif !COMPUTE_SHADER_GLOBAL_ENABLE_X && !COMPUTE_SHADER_GLOBAL_ENABLE_Y && COMPUTE_SHADER_GLOBAL_ENABLE_Z
#define gl_WorkGroupInvocationIndex (gl_WorkGroupID.z)
#elif COMPUTE_SHADER_GLOBAL_ENABLE_X && COMPUTE_SHADER_GLOBAL_ENABLE_Y && !COMPUTE_SHADER_GLOBAL_ENABLE_Z
#define gl_WorkGroupInvocationIndex (gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x)
#elif COMPUTE_SHADER_GLOBAL_ENABLE_X && !COMPUTE_SHADER_GLOBAL_ENABLE_Y && COMPUTE_SHADER_GLOBAL_ENABLE_Z
#define gl_WorkGroupInvocationIndex (gl_WorkGroupID.z * gl_NumWorkGroups.x + gl_WorkGroupID.x)
#elif !COMPUTE_SHADER_GLOBAL_ENABLE_X && COMPUTE_SHADER_GLOBAL_ENABLE_Y && COMPUTE_SHADER_GLOBAL_ENABLE_Z
#define gl_WorkGroupInvocationIndex (gl_WorkGroupID.z * gl_NumWorkGroups.y + gl_WorkGroupID.y)
#elif COMPUTE_SHADER_GLOBAL_ENABLE_X && COMPUTE_SHADER_GLOBAL_ENABLE_Y && COMPUTE_SHADER_GLOBAL_ENABLE_Z
#define gl_WorkGroupInvocationIndex (gl_WorkGroupID.z * gl_NumWorkGroups.y * gl_NumWorkGroups.x + gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x)
#else
#error Impossible combination of global axes enabled?!?
#endif

// gl_GlobalInvocationIndex
//   This is a 1D version of gl_GlobalInvocationID. In other words, it is to gl_GlobalInvocationID what gl_LocalInvocationIndex is to gl_LocalInvocationID.
#define gl_GlobalInvocationIndex (gl_WorkGroupInvocationIndex * COMPUTE_SHADER_LOCAL_SIZE_TOTAL + gl_LocalInvocationIndex)

#endif //COMP_COMMON
