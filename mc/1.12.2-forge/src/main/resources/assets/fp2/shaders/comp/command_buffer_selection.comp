/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-$today.year DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef COMP_COMMAND_BUFFER_SELECTION
#define COMP_COMMAND_BUFFER_SELECTION

#include <"fp2:shaders/comp/common.comp">

//
//
// MACRO VALIDATION
//
//

#if !defined(MULTIPASS_COMMAND_BUFFER_PASS_COUNT)
#error MULTIPASS_COMMAND_BUFFER_PASS_COUNT must be set!
#endif

//
//
// ABSTRACT METHODS
//
//

/**
 * Checks whether or not the draw command with the given index may be selected.
 *
 * @param index the draw command's index
 */
bool select(uint index);

//
//
// IMPLEMENTATION-SPECIFIC CODE
//
//

#if defined(MULTIPASS_COMMAND_BUFFER_TYPE_MULTIDRAW_INDIRECT)

#include <"fp2:shaders/comp/indirect_draw.comp">

layout(std430, binding = 4) buffer COMMANDS {
    DrawElementsIndirectCommand commands[];
};

void main() {
    uint index = gl_GlobalInvocationIndex;
    uint scaledIndex = index * MULTIPASS_COMMAND_BUFFER_PASS_COUNT;

    uint instanceCount = uint(select(index));
    for (uint pass = 0; pass < MULTIPASS_COMMAND_BUFFER_PASS_COUNT; pass++) {
        uint commandIndex = scaledIndex + pass;
        commands[commandIndex].instanceCount = uint(commands[commandIndex].count != 0) & instanceCount;
    }
}

#else
#error unknown command buffer type?!?
#endif

#endif //COMP_COMMAND_BUFFER_SELECTION
