/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-2021 DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

natives {
    includeDirectories = [System.getenv("JAVA_HOME") + "/include", System.getenv("JAVA_HOME") + "/include/linux", "${rootProject.projectDir}/natives"]
    cxxFlags = [
            //workaround for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55522: don't use -ffast-math when linking, only when compiling
            "-O2", "-ffast-math", "-std=c++17", "-Wno-attributes", "-ffunction-sections", "-fdata-sections",
            //put vectorclass in an anonymous namespace
            "-DVCL_NAMESPACE=",
            "-DFP2_ROOT_NAMESPACE=",
    ]
    linkerFlags = ["-shared", "-fuse-ld=lld", "-Wl,-icf=all"]

    libraries = ["https://cloud.daporkchop.net/programs/source/vectorclass-2.01.03"]

    architectures {
        x86_64 {
            simdExtensions {
                SSE2 {
                    cxxFlags = ["-msse2"]
                    registerWidth = 128
                }
                SSE3 {
                    cxxFlags = ["-msse2", "-msse3"]
                    registerWidth = 128
                }
                SSSE3 {
                    cxxFlags = ["-msse2", "-msse3", "-mssse3"]
                    registerWidth = 128
                }
                register("SSE4.1") {
                    cxxFlags = ["-msse2", "-msse3", "-mssse3", "-msse4.1"]
                    registerWidth = 128
                }
                register("SSE4.2") {
                    cxxFlags = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2"]
                    registerWidth = 128
                }
                AVX {
                    cxxFlags = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mavx"]
                    registerWidth = 256
                }
                AVX_FMA {
                    cxxFlags = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mavx", "-mfma"]
                    registerWidth = 256
                }
                AVX2 {
                    cxxFlags = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mavx", "-mfma", "-mavx2"]
                    registerWidth = 256
                }
                AVX512F {
                    cxxFlags = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mavx", "-mfma", "-mavx2", "-mavx512f"]
                    registerWidth = 512
                }
                AVX512VL_BW_DQ {
                    cxxFlags = ["-msse2", "-msse3", "-mssse3", "-msse4.1", "-msse4.2", "-mavx", "-mfma", "-mavx2", "-mavx512f", "-mavx512vl", "-mavx512bw", "-mavx512dq"]
                    registerWidth = 512
                }
            }
        }
    }

    operatingSystems {
        register("linux-gnu") {
            sharedLibraryExtension = "so"
            supportedArchitectures = [architectures.x86_64]

            cxxFlags = ["-fPIC"]
        }
        register("w64-mingw32") {
            sharedLibraryExtension = "dll"
            supportedArchitectures = [architectures.x86_64]
        }
    }
}
